import psycopg2
import csv

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
    dbname="phonebook",
    user="postgres",
    password="12345",   
    host="localhost",
    port="5432"
)

cur = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
cur.execute("""
    CREATE TABLE IF NOT EXISTS contacts (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100),
        phone VARCHAR(20)
    )
""")
conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
def insert_from_console():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    cur.execute("INSERT INTO contacts (name, phone) VALUES (%s, %s)", (name, phone))
    conn.commit()
    print("–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω.\n")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ CSV
def insert_from_csv():
    filename = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É: ")
    try:
        with open(filename, newline='', encoding='utf-8') as file:
            reader = csv.reader(file)
            next(reader)  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for row in reader:
                if len(row) >= 2:
                    cur.execute("INSERT INTO contacts (name, phone) VALUES (%s, %s)", (row[0], row[1]))
        conn.commit()
        print("–î–∞–Ω–Ω—ã–µ –∏–∑ CSV –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n")
    except FileNotFoundError:
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def update_contact():
    name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")
    new_name = input("–ù–æ–≤–æ–µ –∏–º—è (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è—Ç—å): ")
    new_phone = input("–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è—Ç—å): ")

    if new_name:
        cur.execute("UPDATE contacts SET name = %s WHERE name = %s", (new_name, name))
    if new_phone:
        cur.execute("UPDATE contacts SET phone = %s WHERE name = %s", (new_phone, name))
    conn.commit()
    print("–ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.\n")

# –ü–æ–∏—Å–∫
def search_contacts():
    keyword = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
    cur.execute("SELECT * FROM contacts WHERE name ILIKE %s OR phone ILIKE %s", (f'%{keyword}%', f'%{keyword}%'))
    results = cur.fetchall()
    if results:
        for row in results:
            print(f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}")
    else:
        print("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    print()

# –£–¥–∞–ª–µ–Ω–∏–µ
def delete_contact():
    value = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    cur.execute("DELETE FROM contacts WHERE name = %s OR phone = %s", (value, value))
    conn.commit()
    print("–ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª).\n")

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
def show_all():
    cur.execute("SELECT * FROM contacts")
    results = cur.fetchall()
    if results:
        for row in results:
            print(f"ID: {row[0]}, –ò–º—è: {row[1]}, –¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}")
    else:
        print("–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—É—Å—Ç–∞.")
    print()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def menu():
    while True:
        print("üìû PhoneBook –ú–µ–Ω—é:")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä—É—á–Ω—É—é")
        print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ CSV")
        print("3. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
        print("4. –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
        print("5. –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
        print("6. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
        print("7. –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7): ")
        if choice == '1':
            insert_from_console()
        elif choice == '2':
            insert_from_csv()
        elif choice == '3':
            update_contact()
        elif choice == '4':
            search_contacts()
        elif choice == '5':
            delete_contact()
        elif choice == '6':
            show_all()
        elif choice == '7':
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    cur.close()
    conn.close()
    print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    menu()
